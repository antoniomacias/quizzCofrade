package com.example.ammacias.quizzcofrade.localdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USUARIOS_HERMANDADES".
*/
public class UsuariosHermandadesDao extends AbstractDao<UsuariosHermandades, Long> {

    public static final String TABLENAME = "USUARIOS_HERMANDADES";

    /**
     * Properties of entity UsuariosHermandades.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdUsuario = new Property(1, long.class, "idUsuario", false, "ID_USUARIO");
        public final static Property IdHermandad = new Property(2, long.class, "idHermandad", false, "ID_HERMANDAD");
        public final static Property Categoria = new Property(3, String.class, "categoria", false, "CATEGORIA");
    };


    public UsuariosHermandadesDao(DaoConfig config) {
        super(config);
    }
    
    public UsuariosHermandadesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USUARIOS_HERMANDADES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_USUARIO\" INTEGER NOT NULL ," + // 1: idUsuario
                "\"ID_HERMANDAD\" INTEGER NOT NULL ," + // 2: idHermandad
                "\"CATEGORIA\" TEXT NOT NULL );"); // 3: categoria
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USUARIOS_HERMANDADES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UsuariosHermandades entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdUsuario());
        stmt.bindLong(3, entity.getIdHermandad());
        stmt.bindString(4, entity.getCategoria());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UsuariosHermandades entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdUsuario());
        stmt.bindLong(3, entity.getIdHermandad());
        stmt.bindString(4, entity.getCategoria());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UsuariosHermandades readEntity(Cursor cursor, int offset) {
        UsuariosHermandades entity = new UsuariosHermandades( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // idUsuario
            cursor.getLong(offset + 2), // idHermandad
            cursor.getString(offset + 3) // categoria
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UsuariosHermandades entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUsuario(cursor.getLong(offset + 1));
        entity.setIdHermandad(cursor.getLong(offset + 2));
        entity.setCategoria(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UsuariosHermandades entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UsuariosHermandades entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
