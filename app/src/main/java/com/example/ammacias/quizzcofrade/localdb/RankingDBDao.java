package com.example.ammacias.quizzcofrade.localdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RANKING_DB".
*/
public class RankingDBDao extends AbstractDao<RankingDB, Long> {

    public static final String TABLENAME = "RANKING_DB";

    /**
     * Properties of entity RankingDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdUsuario = new Property(1, Long.class, "idUsuario", false, "ID_USUARIO");
        public final static Property Nick = new Property(2, String.class, "nick", false, "NICK");
        public final static Property Aciertos = new Property(3, Integer.class, "aciertos", false, "ACIERTOS");
        public final static Property Fecha = new Property(4, java.util.Date.class, "fecha", false, "FECHA");
    };


    public RankingDBDao(DaoConfig config) {
        super(config);
    }
    
    public RankingDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RANKING_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_USUARIO\" INTEGER," + // 1: idUsuario
                "\"NICK\" TEXT," + // 2: nick
                "\"ACIERTOS\" INTEGER," + // 3: aciertos
                "\"FECHA\" INTEGER);"); // 4: fecha
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RANKING_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RankingDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindLong(2, idUsuario);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(3, nick);
        }
 
        Integer aciertos = entity.getAciertos();
        if (aciertos != null) {
            stmt.bindLong(4, aciertos);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(5, fecha.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RankingDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindLong(2, idUsuario);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(3, nick);
        }
 
        Integer aciertos = entity.getAciertos();
        if (aciertos != null) {
            stmt.bindLong(4, aciertos);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(5, fecha.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RankingDB readEntity(Cursor cursor, int offset) {
        RankingDB entity = new RankingDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idUsuario
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nick
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // aciertos
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // fecha
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RankingDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUsuario(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAciertos(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFecha(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RankingDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RankingDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
