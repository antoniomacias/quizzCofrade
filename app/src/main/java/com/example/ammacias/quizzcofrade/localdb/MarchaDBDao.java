package com.example.ammacias.quizzcofrade.localdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARCHA_DB".
*/
public class MarchaDBDao extends AbstractDao<MarchaDB, Long> {

    public static final String TABLENAME = "MARCHA_DB";

    /**
     * Properties of entity MarchaDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Banda = new Property(2, String.class, "banda", false, "BANDA");
        public final static Property Fecha = new Property(3, String.class, "fecha", false, "FECHA");
        public final static Property Ruta = new Property(4, String.class, "ruta", false, "RUTA");
    };


    public MarchaDBDao(DaoConfig config) {
        super(config);
    }
    
    public MarchaDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARCHA_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOMBRE\" TEXT," + // 1: nombre
                "\"BANDA\" TEXT," + // 2: banda
                "\"FECHA\" TEXT," + // 3: fecha
                "\"RUTA\" TEXT);"); // 4: ruta
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARCHA_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarchaDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String banda = entity.getBanda();
        if (banda != null) {
            stmt.bindString(3, banda);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(4, fecha);
        }
 
        String ruta = entity.getRuta();
        if (ruta != null) {
            stmt.bindString(5, ruta);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarchaDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String banda = entity.getBanda();
        if (banda != null) {
            stmt.bindString(3, banda);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(4, fecha);
        }
 
        String ruta = entity.getRuta();
        if (ruta != null) {
            stmt.bindString(5, ruta);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MarchaDB readEntity(Cursor cursor, int offset) {
        MarchaDB entity = new MarchaDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // banda
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fecha
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ruta
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarchaDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBanda(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFecha(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRuta(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MarchaDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MarchaDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
