package com.example.ammacias.quizzcofrade.localdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PASOS_DB".
*/
public class PasosDBDao extends AbstractDao<PasosDB, Long> {

    public static final String TABLENAME = "PASOS_DB";

    /**
     * Properties of entity PasosDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NombreTitular = new Property(1, String.class, "nombreTitular", false, "NOMBRE_TITULAR");
        public final static Property Foto = new Property(2, String.class, "foto", false, "FOTO");
        public final static Property Banda = new Property(3, String.class, "banda", false, "BANDA");
        public final static Property IdHermandad = new Property(4, long.class, "idHermandad", false, "ID_HERMANDAD");
    };


    public PasosDBDao(DaoConfig config) {
        super(config);
    }
    
    public PasosDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PASOS_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOMBRE_TITULAR\" TEXT NOT NULL ," + // 1: nombreTitular
                "\"FOTO\" TEXT NOT NULL ," + // 2: foto
                "\"BANDA\" TEXT NOT NULL ," + // 3: banda
                "\"ID_HERMANDAD\" INTEGER NOT NULL );"); // 4: idHermandad
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PASOS_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PasosDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNombreTitular());
        stmt.bindString(3, entity.getFoto());
        stmt.bindString(4, entity.getBanda());
        stmt.bindLong(5, entity.getIdHermandad());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PasosDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNombreTitular());
        stmt.bindString(3, entity.getFoto());
        stmt.bindString(4, entity.getBanda());
        stmt.bindLong(5, entity.getIdHermandad());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PasosDB readEntity(Cursor cursor, int offset) {
        PasosDB entity = new PasosDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // nombreTitular
            cursor.getString(offset + 2), // foto
            cursor.getString(offset + 3), // banda
            cursor.getLong(offset + 4) // idHermandad
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PasosDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombreTitular(cursor.getString(offset + 1));
        entity.setFoto(cursor.getString(offset + 2));
        entity.setBanda(cursor.getString(offset + 3));
        entity.setIdHermandad(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PasosDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PasosDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
